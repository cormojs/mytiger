structure A = AST

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS
  | LOWPREC

%nonterm
    program  of A.exp
  | exp      of A.exp
  | lvalue   of A.lvalue
  (* | unit *)
  (* | sequence *)
  | seqexp   of A.exp
  (* | arithexp *)
  (* | compexp *)
  (* | boolexp *)
  (* | funcCall *)
  (* | funcParam *)
  | control  of A.exp
  | decs     of A.exp
  | dec      of A.exp
  | tydec    of A.exp
  | vardec   of A.exp
  | fundec   of A.exp
  | ty       of A.exp
  | tyfields of A.exp
  (* | assignment *)
  (* | record *)
  (* | recordFields *)
  (* | array *)
    

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp (exp)

	
exp : INT        (A.IntExp(INT))
    | STRING     (A.StringExp(STRING))
    | lvalue     (A.LValueExp(lvalue))
    | NIL        (A.NilExp)
    (* | unit       ("") *)
    (* | sequence   ("") *)
    (* | funcCall   ("") *)
    (* | arithexp   ("") *)
    (* | compexp    ("") *)
    (* | boolexp    ("") *)
    (* | record     ("") *)
    (* | array      ("") *)
    (* | assignment ("") *)
    (* | control    (control) *)

lvalue : ID                       (A.IDLValue(ID))
       | lvalue DOT ID            (A.FieldLValue(lvalue, ID))
       | lvalue LBRACK exp RBRACK (A.ArrayLValue(lvalue, exp))

(* unit : LPAREN RPAREN () *)

(* sequence : LPAREN seqexp RPAREN ("") *)

(* seqexp : exp           ("") *)
(*        | seqexp SEMICOLON exp ("") *)

(* funcCall : ID LPAREN RPAREN           ("") *)
(* 	 | ID LPAREN funcParam RPAREN ("") *)
	      
(* funcParam : exp                 ("") *)
(* 	  | funcParam COMMA exp ("") *)

(* arithexp : exp PLUS exp           ("") *)
(* 	 | exp MINUS exp          ("") *)
(* 	 | exp TIMES exp          ("") *)
(* 	 | exp DIVIDE exp         ("") *)
(* 	 | MINUS exp %prec UMINUS ("") *)

(* compexp : exp GE exp  ("") *)
(* 	| exp GT exp  ("") *)
(* 	| exp LE exp  ("") *)
(* 	| exp LT exp  ("") *)
(* 	| exp EQ exp  ("") *)
(* 	| exp NEQ exp ("") *)

(* boolexp : exp AND exp ("") *)
(* 	| exp OR exp  ("") *)

(* record : ID LBRACE RBRACE              ("") *)
(*        | ID LBRACE recordFields RBRACE ("") *)

(* recordFields : ID EQ exp                    ("") *)
(* 	     | recordFields COMMA ID EQ exp ("") *)

(* array : ID LBRACK exp RBRACK OF exp ("") *)

(* assignment : lvalue ASSIGN exp ("") *)

(* control : IF exp THEN exp                 ("IfThen") *)
(* 	| IF exp THEN exp ELSE exp        ("IfElse") *)
(* 	| WHILE exp DO exp                ("While") *)
(* 	| FOR ID ASSIGN exp TO exp DO exp ("For") *)
(* 	| BREAK                           ("Break") *)
(* 	| LET decs IN seqexp END          ("Let ") *)

(* decs :          ("empDec") *)
(*      | dec decs ("Dec ") *)
	   
(* dec : tydec  ("tydec ") *)
(*     | vardec ("") *)
(*     | fundec ("") *)

(* tydec : TYPE ID EQ ty (ID ^ "=" ^ ty) *)

(* ty : ID                     (ID) *)
(*    | LBRACE RBRACE          ("empTy()") *)
(*    | LBRACE tyfields RBRACE ("") *)
(*    | ARRAY OF ID            ("") *)

(* tyfields : ID COLON ID                ("") *)
(* 	 | tyfields COMMA ID COLON ID ("") *)

(* vardec : VAR ID ASSIGN exp          ("") *)
(*        | VAR ID COLON ID ASSIGN exp ("") *)

(* fundec : FUNCTION ID LPAREN RPAREN EQ exp ("") *)
(*        | FUNCTION ID LPAREN RPAREN COLON ID EQ exp ("") *)
(*        | FUNCTION ID LPAREN tyfields RPAREN EQ exp ("") *)
(*        | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ("") *)
